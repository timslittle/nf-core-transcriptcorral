#!/usr/bin/perl
# corntrsetbltab.pl

$REF2=$ENV{ref2}||0;
$MERGE=$ENV{merge}||0;
$MINA=$ENV{mina}||25; $IDFILT=$ENV{idfilt}||0; 

while(<>) {
  @v=split; 
  if($REF2) { ($td,$rd,$bs,$idn,$aln,$tw,$rw,$tspa,$rspa)=@v; }
  else { ($rd,$td,$bs,$idn,$aln,$rw,$tw,$rspa,$tspa)=@v; }
  
  if(@v==1){ $ok{$v[0]}++; next; } elsif(/^Query/) { } 
  elsif($IDFILT) { next unless($ok{$rd}); }
  
  ($ts=$td)=~s/[Ll]oc.*//; 
  $ts=~s/(an|sm)velv/velv/;
  ($km)=$ts=~m/k(\d\d+)/; $ts=~s/k$km// if($km); $km||=0;
  if($ts=~s/^tidb//){ $ts=~s/[fr]id/idba/; } 

  ($sm)= $ts=~m/(EVm|zeamjgi|ncbig|velv|soap|trin|idba|brid)/; 
  unless($sm){ $sm="miss"; $ts.="miss"; } 
  if($sm=~/EVm/) { $ts=~s/EVm\d+t\d+/EVm/; } 
  elsif($sm=~/ncbig/) { $ts=~s/ncbig\d+t\d+/ncbig/; } 
  elsif($MERGE) { $ts=$sm; }
  $ts=~s/:.*//; # zeamjgi:id, others?
  
  s/$/\t$sm:$ts/; 
  ($pid,$pal)= map{ my $p= ($rw>0)?sprintf"%.0f",100*$_/$rw:0; $p=100 if($p>100); $p; } ($idn,$aln); 
  if(/^Query/) { ($pid,$pal)=("pIden","pAlgn"); $sm="Method"; $ts=""; }; 
  unless($did{$rd.$ts}++) { if($pal>=$MINA) { $rd{$rd}++; $td{$ts}{$td}++;  
  if($tspa) { $tdrd{$ts}{$td}{$rd}++; $tspan{$td}{$rd}=$tspa; }
  $ts{$ts}++; $pid{$ts}+=$pid; $pal{$ts}+=$pal;
  $aln{$ts}+=$aln; $sumtw{$ts}+=$tw; } 
  print join("\t",@v,$pid,$pal,"$sm:$ts")."\n"; 
  } 
}
@ts=sort keys %ts;
@rd=sort keys %rd; $nrd=@rd; 
$nok=($IDFILT)?scalar(keys %ok):$nrd;
$pts=sprintf"%.1f",100*$nrd/$nok;
print "#\n#Summary per method, min $MINA %Align, for $nrd/$nok $pts% found ref transcripts\n"; 
@hd=qw(Methd nHits pHits nTids pIden pAlgn Align Tlen Joins);
if($IDFILT) { @hd=qw(Methd nHits pHits nTids pIdenH pAlgnH AlignH TlenH pAlgnT AlignT Joins); }
print "# ".join("\t",@hd)."\n";
for $ts (@ts) { 
  @td= sort keys %{$td{$ts}}; $ntid=scalar(@td);
  $joins=0;
  
  if(%tspan) { 
    for $td (@td) { 
      @trd=sort keys %{$tdrd{$ts}{$td}}; $ntrd=@trd; 
      for $i (0..$ntrd-2) { $ird=$trd[$i];
       for($j=$i+1; $j<$ntrd-1; $j++) { $jrd=$trd[$j];
          $nov= notover($tspan{$td}{$ird}, $tspan{$td}{$jrd});
          $joins++ if($nov);
          }
        }
    }
  } 
  $nts=$ts{$ts};
  #o#@ave= map{ sprintf "%.1f",$_/$nrd; }($pid{$ts},$pal{$ts},$aln{$ts},$sumtw{$ts});  
  @ave= map{ sprintf "%.1f",$_/$nts; }($pid{$ts},$pal{$ts},$aln{$ts},$sumtw{$ts});  
  if($IDFILT) {  #? nok or $nrd here
  @avet= map{ sprintf "%.1f",$_/$nrd; }($pid{$ts},$pal{$ts},$aln{$ts},$sumtw{$ts});  
  @ave= (@ave,@avet[1,2]);
  }
  $pts=sprintf"%.1f",100*$nts/$nok; # /$nrd; 
  map{ s/4ms/s/; s/9agv/v/; s/cornhi8m//; s/cornhi12mer3//; s/Zeamay(.EVm)/z$1/; } ($ts);
  print "#".join("\t",$ts,$nts,$pts,$ntid,@ave,$joins)."\n"; 
} 

sub notover {
  my($ispa,$jspa)=@_; #328-600:- ..
  my($ib,$ie,$jb,$je)=map{ my($b,$e)= m/(\d+)\-(\d+)/; ($b,$e) } ($ispa,$jspa);
  my($io,$jo)=(0,0); 
  ($ib,$ie,$io)=($ie,$ib,-1) if($ib>$ie);
  ($jb,$je,$jo)=($je,$jb,-1) if($jb>$je);
  return ($ib < $je and $ie > $jb and $jo eq $io)?0:1
}

__END__

